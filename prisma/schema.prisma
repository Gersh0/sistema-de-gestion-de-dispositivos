datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role?     @relation(fields: [roleId], references: [id])
  roleId        String?
  accounts      Account[]
  sessions      Session[]
  loans         Loan[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Enum_RoleName {
  ADMIN
  CLIENT
  TECHNICAL
  COORDINATOR
  EMPLOYEE
}

model Role {
  id    String        @id @default(cuid())
  name  Enum_RoleName
  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Enum_Category {
  LAPTOP
  PC
  MOBILE
  TABLET
}

model Device {
  id           String        @id @default(cuid())
  loans              LoanDevice[]
  tickets            Ticket[]
  serialNumber       String
  model              String
  RAMReference       String
  RAMInfo            String
  processorReference String
  perocessorInfo     String
  GPUReference       String        @default("no aplica")
  GPUInfo            String        @default("no aplica")
  boardReference     String        @default("no aplica")
  boardInfo          String        @default("no aplica")
  storageReference   String
  storageInfo        String
  extraInfo          String
  price              Decimal
  category           Enum_Category
  removed            Boolean       @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Loan {
  id          String           @id @default(cuid())
  user            User             @relation(fields: [userId], references: [id])
  peripherals     LoanPeripheral[]
  devices         LoanDevice[]
  tickets          Ticket[]
  userId          String
  totalPrice      Decimal
  originLocation  String
  arrivalLocation String
  startDate       DateTime
  endDate         DateTime
  returnDate      DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Enum_Type {
  MOUSE
  KEYBOARD
  MONITOR
  HEADSET
  WEBCAM
  OTHER
}

model Peripheral {
  id           String           @id @default(cuid())
  loans        LoanPeripheral[]
  serialNumber String
  model        String
  type         Enum_Type
  brand        String
  price        Decimal
  extraInfo    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Enum_TicketState {
  OPEN
  IN_PROGRESS
  CLOSED
}

model Ticket {
  id   String     @id @default(cuid())
  state      Enum_TicketState
  subject    String
  desription String
  loanId     String
  deviceId   String

  loan   Loan   @relation(fields: [loanId], references: [id], onDelete: Cascade)
  device Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([loanId, deviceId])
}

///auxiliary table between loan and peripheral
model LoanPeripheral {
  loanId       String
  peripheralId String
  loan         Loan       @relation(fields: [loanId], references: [id], onDelete: Cascade)
  peripheral   Peripheral @relation(fields: [peripheralId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([loanId, peripheralId])
}

model LoanDevice {
  loanId   String
  deviceId String

  loan   Loan   @relation(fields: [loanId], references: [id], onDelete: Cascade)
  device Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([loanId, deviceId])
}
